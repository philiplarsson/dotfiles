* Emacs Configuration File

** General Settings
#+BEGIN_SRC emacs-lisp
;; Dont Show Startup Message
(setq inhibit-startup-message t)

;; Remove Scrollbar
(scroll-bar-mode -1)

;; scroll one line at a time (less "jumpy" than defaults)
(setq mouse-wheel-scroll-amount '(1 ((shift) . 1))) ;; one line at a time
(setq mouse-wheel-progressive-speed nil) ;; don't accelerate scrolling
(setq mouse-wheel-follow-mouse 't) ;; scroll window under mouse
(setq scroll-step 1) ;; keyboard scroll one line at a time

;; Highlight Parenthesis
(show-paren-mode t)

;; Remove Toolbar
(tool-bar-mode -1)

;; Add linespacing
(setq-default line-spacing 12)

;; Wrap text on words
(global-visual-line-mode t)

;; Remove selected text when typing
(delete-selection-mode t)

;; Use 2 spaces for tab
(setq-default tab-width 2)
(setq-default indent-tabs-mode nil)

;; Allow y and n instead of yes and no
(fset 'yes-or-no-p 'y-or-n-p)

;; Auto-refresh buffer when file on disk change
(global-auto-revert-mode t)

;; Disable Bell
(setq visible-bell 1)

;; Save backups in emacs-backups folder
(setq backup-directory-alist `(("." . "~/.emacs-backups")))
;; Create backups by copying
(setq backup-by-copying t) 

;; Use 80 for M-q
(setq-default fill-column 80)
#+END_SRC

** Bootstrap 'use-package'
Make sure the package 'use-package' is installed.
Idea from [[http://cestlaz.github.io/posts/using-emacs-1-setup/][here]].

#+BEGIN_SRC emacs-lisp
(unless (package-installed-p 'use-package)
	(package-refresh-contents)
	(package-install 'use-package))
#+END_SRC

** Plugins
*** Which Key
Which keys brings up help on key combinations.
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :ensure t
  :config
  (which-key-mode))
#+END_SRC
*** Material Theme
From [[https://emacsthemes.com/themes/material-theme.html][here]].
#+BEGIN_SRC emacs-lisp
(use-package color-theme-sanityinc-tomorrow
  :ensure t
  :config (load-theme 'sanityinc-tomorrow-eighties t))
#+END_SRC
*** Avy
"Avy is a GNU Emacs package for jumping to visible text using a char-based decision tree."
#+BEGIN_SRC emacs-lisp
(use-package avy
  :ensure t)
#+END_SRC
Use Ctrl-C Ctrl-Space to jump to word.
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c C-SPC") 'avy-goto-word-or-subword-1)
#+END_SRC
*** Habitica
#+BEGIN_SRC emacs-lisp
(use-package habitica
  :ensure t)
#+END_SRC
*** php-mode
#+BEGIN_SRC emacs-lisp
(use-package php-mode
  :ensure t)
#+END_SRC
*** Helm
#+BEGIN_SRC emacs-lisp
(use-package helm
  :ensure t
  :config
  (require 'helm-config))
#+END_SRC
*** Projectile
#+BEGIN_SRC emacs-lisp
(use-package projectile
  :ensure t
  :config
  (projectile-global-mode)
  (setq projectile-completion-system 'helm))
#+END_SRC
*** Helm Projectile
#+BEGIN_SRC emacs-lisp
(use-package helm-projectile
  :ensure t
  :config
  (setq projectile-completion-system 'helm)
  (setq projectile-switch-project-action 'helm-projectile)
  (helm-projectile-on))
#+END_SRC
*** Helm-ag
#+BEGIN_SRC emacs-lisp
(use-package helm-ag
  :ensure t)
#+END_SRC
*** Web Mode
#+BEGIN_SRC emacs-lisp
(use-package web-mode
  :ensure t
  :config
  (setq web-mode-markup-indent-offset 2)
  (setq web-mode-code-indent-offset 2))
#+END_SRC
Add Twig to Web Mode
#+BEGIN_SRC emacs-lisp
(require 'web-mode)
(add-to-list 'auto-mode-alist '("\\.twig\\'" . web-mode))
#+END_SRC
*** Emmet Mode
#+BEGIN_SRC emacs-lisp
(use-package emmet-mode
  :ensure t)
#+END_SRC
*** Avy 
Read about avy [[https://github.com/abo-abo/avy][here]].
#+BEGIN_SRC emacs-lisp
(use-package avy
  :ensure t)
#+END_SRC
*** Dash at point
#+BEGIN_SRC emacs-lisp
(use-package dash-at-point
  :ensure t)
#+END_SRC
*** Expand Region
Read about expand region [[https://github.com/magnars/expand-region.el][here]].
#+BEGIN_SRC emacs-lisp
(use-package expand-region
  :ensure t)
#+END_SRC
*** Dumb Jump
#+BEGIN_SRC emacs-lisp
(use-package dumb-jump
  :bind (("M-g o" . dumb-jump-go-other-window)
         ("M-g j" . dumb-jump-go)
         ("M-g b" . dumb-jump-back)
         ("M-g i" . dumb-jump-go-prompt)
         ("M-g x" . dumb-jump-go-prefer-external)
         ("M-g z" . dumb-jump-go-prefer-external-other-window))
  :config (setq dumb-jump-selector 'helm)
  :ensure t)
(defun mouse-test (event)
  "Move the point to the clicked position and call dump jump (go to definition)"
  (interactive "e")
  (let ((es (event-start event)))
    (select-window (posn-window es))
    (goto-char (posn-point es))
    (dumb-jump-go)))
(global-set-key (kbd "<C-down-mouse-1>") 'mouse-test)
(global-set-key (kbd "<triple-wheel-left>") 'dumb-jump-back)
#+END_SRC
*** All-The-Icons
For this package to work correctly we need to install the fonts as described [[https://github.com/domtronn/all-the-icons.el#installing-fonts][here]].

#+BEGIN_SRC emacs-lisp
(use-package all-the-icons
  :ensure t)
#+END_SRC

*** Neotree
Website: [[https://github.com/jaypei/emacs-neotree][emacs-neotree]]
Documentation: [[https://www.emacswiki.org/emacs/NeoTree][emacswiki]]

#+BEGIN_SRC emacs-lisp
(use-package neotree
  :ensure t
  :config
  (setq neo-theme (if (display-graphic-p) 'icons 'arrow))
  (setq projectile-switch-project-action 'neotree-projectile-action))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c n t") 'neotree-toggle)
(global-set-key (kbd "C-c n v") 'neotree-enter-vertical-split)
(global-set-key (kbd "C-c n h") 'neotree-enter-horizontal-split)
;; Helm Swoop doesn’t work correctly when neotree is open. Therefore we close neotree when we call helm-swoop.
(global-set-key (kbd "M-i") (lambda() (interactive) (neotree-hide) (helm-swoop)))
(global-set-key (kbd "M-I") 'helm-swoop-back-to-last-point)

#+END_SRC
** Keybindings
*** General Keybindings
Use Ctrl-W to remove word before point.
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-w") 'backward-kill-word)
(global-set-key (kbd "C-x C-k") 'kill-region)
#+END_SRC

Use zap up to char instead of the default of zap and delete char.
#+BEGIN_SRC emacs-lisp
  (autoload 'zap-up-to-char "misc"
    "Kill up to, but not including ARGth occurrence of CHAR.
  
  \(fn arg char)"
    'interactive)

(global-set-key (kbd "M-z") 'zap-up-to-char)
#+END_SRC
*** Plugin Keybindings
**** Helm Keybindings
The default C-x c is quite close to C-x C-c, which quits Emacs. Changed to C-c h. Note: We must set “C-c h” globally, because we cannot change helm-command-prefix-key once helm-config is loaded.
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c h") 'helm-command-prefix)
(global-unset-key (kbd "C-x c"))
#+END_SRC
Use helm mini, helm-M-x and helm kill ring.
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x b") 'helm-mini)
(global-set-key (kbd "C-x C-f") 'helm-find-files)
(setq helm-buffers-fuzzy-matching t
      helm-recentf-fuzzy-match    t) ; fuzzy matching helm mini

(define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action) ; rebind tab to run persistent action

(define-key helm-map (kbd "C-i") 'helm-execute-persistent-action) ; make TAB work in terminal
(define-key helm-map (kbd "C-z")  'helm-select-action) ; list actions using C-z
(global-set-key (kbd "M-x") 'helm-M-x)

(global-set-key (kbd "M-y") 'helm-show-kill-ring)

(setq helm-M-x-fuzzy-match t) ;; optional fuzzy matching for helm-M-x

(when (executable-find "ack-grep")
  (setq helm-grep-default-command "ack-grep -Hn --no-group --no-color %e %p %f"
        helm-grep-default-recurse-command "ack-grep -H --no-group --no-color %e %p %f"))
#+END_SRC
**** Avy
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c C-SPC") 'avy-goto-word-or-subword-1)
#+END_SRC
**** Expand Region
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c e") 'er/expand-region)
#+END_SRC
**** Dash at point
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c D") 'dash-at-point)
#+END_SRC
** Hooks
#+BEGIN_SRC emacs-lisp
(add-hook 'sqml-mode-hook 'emmet-mode) ;; auto start on any markup modes
(add-hook 'web-mode-hook 'emmet-mode)

;; Use Auto Fill Mode for all text mode buffers
(add-hook 'text-mode-hook 'turn-on-auto-fill)

(add-hook 'php-mode-hook 'electric-pair-mode)
(add-hook 'php-mode-hook (lambda () (subword-mode 1)))
(add-hook 'php-mode-hook (lambda () (setq show-trailing-whitespace t)))
(add-hook 'php-mode-hook 'php-enable-psr2-coding-style)

;; remove {} auto pairing in electric-pair-pairs for web-mode
(add-hook
   'web-mode-hook
   '(lambda ()
      (setq web-mode-enable-auto-pairing nil)
      (setq-local
       electric-pair-pairs
       (append electric-pair-pairs '((?% . ?%))))))
#+END_SRC
** Custom Functions
*** Duplicate Line
#+BEGIN_SRC emacs-lisp
(defun duplicate-line()
  (interactive)
  (move-beginning-of-line 1)
  (kill-line)
  (yank)
  (open-line 1)
  (next-line 1)
  (yank)
)
(global-set-key (kbd "C-c d") 'duplicate-line)
#+END_SRC
