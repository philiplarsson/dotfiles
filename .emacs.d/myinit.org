* Emacs Configuration File

** General Settings
*** Multiple Settings
#+BEGIN_SRC emacs-lisp
;; Dont Show Startup Message
(setq inhibit-startup-message t)

;; Remove Scrollbar
(scroll-bar-mode -1)

;; scroll one line at a time (less "jumpy" than defaults)
(setq mouse-wheel-scroll-amount '(1 ((shift) . 1))) ;; one line at a time
(setq mouse-wheel-progressive-speed nil) ;; don't accelerate scrolling
(setq mouse-wheel-follow-mouse 't) ;; scroll window under mouse
(setq scroll-step 1) ;; keyboard scroll one line at a time

;; Highlight Parenthesis
(show-paren-mode t)

;; Remove Toolbar
(tool-bar-mode -1)

;; Add linespacing
(setq-default line-spacing 12)

;; Wrap text on words
(global-visual-line-mode t)

;; Remove selected text when typing
(delete-selection-mode t)

;; Use 2 spaces for tab
(setq-default tab-width 2)
(setq-default indent-tabs-mode nil)

;; Allow y and n instead of yes and no
(fset 'yes-or-no-p 'y-or-n-p)

;; Auto-refresh buffer when file on disk change
(global-auto-revert-mode t)

;; Auto-refresh dired on file change
(add-hook 'dired-mode-hook 'auto-revert-mode)

;; Disable Bell
(setq visible-bell 1)

;; Save backups in emacs-backups folder
(setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
;; Disk space is cheap. Save lots.
(setq delete-old-versions -1)
(setq version-control t)
(setq vc-make-backup-files t)
(setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)))

;; Use 80 for M-q
(setq-default fill-column 80)
#+END_SRC

*** Use UTF-8
From [[https://www.masteringemacs.org/article/working-coding-systems-unicode-emacs][here]].

#+BEGIN_SRC emacs-lisp
;; Prefer UTF-8 
(set-language-environment "UTF-8")
(prefer-coding-system 'utf-8)
(set-default-coding-systems 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
;; backwards compatibility as default-buffer-file-coding-system
;; is deprecated in 23.2.
(if (boundp 'buffer-file-coding-system)
    (setq-default buffer-file-coding-system 'utf-8)
  (setq default-buffer-file-coding-system 'utf-8))

;; Treat clipboard input as UTF-8 string first; compound text next, etc.
(setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING))
#+END_SRC
** Bootstrap 'use-package'
Make sure the package 'use-package' is installed.
Idea from [[http://cestlaz.github.io/posts/using-emacs-1-setup/][here]].

#+BEGIN_SRC emacs-lisp
(unless (package-installed-p 'use-package)
	(package-refresh-contents)
	(package-install 'use-package))
#+END_SRC

** Plugins
*** Which Key
Which keys brings up help on key combinations.
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :ensure t
  :config
  (which-key-mode))
#+END_SRC
*** Material Theme
From [[https://emacsthemes.com/themes/material-theme.html][here]].
#+BEGIN_SRC emacs-lisp
;(use-package color-theme-sanityinc-tomorrow
;  :ensure t
;  :config (load-theme 'sanityinc-tomorrow-eighties t))
#+END_SRC
*** Spacemacs Theme
#+BEGIN_SRC emacs-lisp
(use-package spacemacs-common
  :ensure spacemacs-theme
  :init
  (load-theme 'spacemacs-dark t)
  (setq spacemacs-theme-org-agenda-height nil)
  (setq spacemacs-theme-org-height nil))
#+END_SRC
#+BEGIN_SRC emacs-lisp
;; set sizes here to stop spacemacs theme resizing these
(set-face-attribute 'org-level-1 nil :height 1.0)
(set-face-attribute 'org-level-2 nil :height 1.0)
(set-face-attribute 'org-level-3 nil :height 1.0)
(set-face-attribute 'org-scheduled-today nil :height 1.0)
(set-face-attribute 'org-agenda-date-today nil :height 1.1)
(set-face-attribute 'org-table nil :foreground "#008787")
#+END_SRC
*** Spaceline Modeline
#+BEGIN_SRC emacs-lisp
(use-package spaceline
  :demand t
  :init
  (setq powerline-default-separator 'arrow)
  :config
  (require 'spaceline-config)
  (spaceline-emacs-theme
  (spaceline-helm-mode 1)))
#+END_SRC
*** All-The-Icons
For this package to work correctly we need to install the fonts as described [[https://github.com/domtronn/all-the-icons.el#installing-fonts][here]].

#+BEGIN_SRC emacs-lisp
(use-package all-the-icons
  :ensure t)
#+END_SRC

*** Spaceline all The icons
#+BEGIN_SRC emacs-lisp
(use-package spaceline-all-the-icons 
  :after spaceline
  :config (spaceline-all-the-icons-theme))
#+END_SRC
*** Avy
"Avy is a GNU Emacs package for jumping to visible text using a char-based decision tree."
#+BEGIN_SRC emacs-lisp
(use-package avy
  :ensure t)
#+END_SRC
Use Ctrl-C Ctrl-Space to jump to word.
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c C-SPC") 'avy-goto-word-or-subword-1)
#+END_SRC
*** Habitica
#+BEGIN_SRC emacs-lisp
(use-package habitica
  :ensure t)
#+END_SRC
*** php-mode
#+BEGIN_SRC emacs-lisp
(use-package php-mode
  :ensure t)
#+END_SRC
*** Helm
#+BEGIN_SRC emacs-lisp
(use-package helm
  :ensure t
  :config
  (require 'helm-config))
#+END_SRC
*** Projectile
#+BEGIN_SRC emacs-lisp
(use-package projectile
  :ensure t
  :config
  (projectile-global-mode)
  (setq projectile-completion-system 'helm))
#+END_SRC
*** Helm Projectile
#+BEGIN_SRC emacs-lisp
(use-package helm-projectile
  :ensure t
  :config
  (setq projectile-completion-system 'helm)
  (setq projectile-switch-project-action 'helm-projectile)
  (helm-projectile-on))
#+END_SRC
*** Helm-ag
#+BEGIN_SRC emacs-lisp
(use-package helm-ag
  :ensure t)
#+END_SRC
*** Ag
#+BEGIN_SRC emacs-lisp
(use-package ag
  :ensure t)
#+END_SRC
*** Web Mode
#+BEGIN_SRC emacs-lisp
(use-package web-mode
  :ensure t
  :config
  (setq web-mode-markup-indent-offset 2)
  (setq web-mode-code-indent-offset 2))
#+END_SRC
Add Twig to Web Mode
#+BEGIN_SRC emacs-lisp
(require 'web-mode)
(add-to-list 'auto-mode-alist '("\\.twig\\'" . web-mode))
#+END_SRC
*** Emmet Mode
#+BEGIN_SRC emacs-lisp
(use-package emmet-mode
  :ensure t)
#+END_SRC
*** Avy 
Read about avy [[https://github.com/abo-abo/avy][here]].
#+BEGIN_SRC emacs-lisp
(use-package avy
  :ensure t)
#+END_SRC
*** Dash at point
#+BEGIN_SRC emacs-lisp
(use-package dash-at-point
  :ensure t)
#+END_SRC
*** Expand Region
Read about expand region [[https://github.com/magnars/expand-region.el][here]].
#+BEGIN_SRC emacs-lisp
(use-package expand-region
  :ensure t)
#+END_SRC
*** Dumb Jump
#+BEGIN_SRC emacs-lisp
(use-package dumb-jump
  :bind (("M-g o" . dumb-jump-go-other-window)
         ("M-g j" . dumb-jump-go)
         ("M-g b" . dumb-jump-back)
         ("M-g i" . dumb-jump-go-prompt)
         ("M-g x" . dumb-jump-go-prefer-external)
         ("M-g z" . dumb-jump-go-prefer-external-other-window))
  :config (setq dumb-jump-selector 'helm)
  :ensure t)
(defun mouse-test (event)
  "Move the point to the clicked position and call dump jump (go to definition)"
  (interactive "e")
  (let ((es (event-start event)))
    (select-window (posn-window es))
    (goto-char (posn-point es))
    (dumb-jump-go)))
(global-set-key (kbd "<C-down-mouse-1>") 'mouse-test)
(global-set-key (kbd "<triple-wheel-left>") 'dumb-jump-back)
#+END_SRC

*** Neotree
Website: [[https://github.com/jaypei/emacs-neotree][emacs-neotree]]
Documentation: [[https://www.emacswiki.org/emacs/NeoTree][emacswiki]]

#+BEGIN_SRC emacs-lisp
(use-package neotree
  :ensure t
  :config
  (setq neo-theme (if (display-graphic-p) 'icons 'arrow))
  (setq projectile-switch-project-action 'neotree-projectile-action))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c n t") 'neotree-toggle)
(global-set-key (kbd "C-c n v") 'neotree-enter-vertical-split)
(global-set-key (kbd "C-c n h") 'neotree-enter-horizontal-split)
;; Helm Swoop doesn’t work correctly when neotree is open. Therefore we close neotree when we call helm-swoop.
(global-set-key (kbd "M-i") (lambda() (interactive) (neotree-hide) (helm-swoop)))
(global-set-key (kbd "M-I") 'helm-swoop-back-to-last-point)

;; Visual
(custom-set-faces
 (set-face-attribute 'neo-file-link-face nil :height 130)
 (set-face-attribute 'neo-dir-link-face nil :height 135)
)
#+END_SRC
*** Editorconfig
Read about editorconfig [[https://github.com/editorconfig/editorconfig-emacs#readme][here]].
#+BEGIN_SRC emacs-lisp
(use-package editorconfig
  :ensure t
  :config
  (editorconfig-mode 1))
#+END_SRC
*** Flycheck

#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :ensure t
  :init (global-flycheck-mode))
#+END_SRC

Only check buffer when saved.
#+BEGIN_SRC emacs-lisp
(setq flycheck-check-syntax-automatically '(mode-enabled save))
#+END_SRC
Run flycheck-verify-setup and set dir to phpcs.phar using C-c ! s.

Run ~./phpcs.phar -i~ to see installed coding standards. 

Set coding standard to PSR2.
#+BEGIN_SRC emacs-lisp
(setq flycheck-phpcs-standard "PSR2")
#+END_SRC
Read more about php code sniffer [[https://github.com/squizlabs/PHP_CodeSniffer/wiki][here]].

*** PHP-Extras
#+BEGIN_SRC emacs-lisp
(use-package php-extras
  :ensure t)
#+END_SRC
*** Company
#+BEGIN_SRC emacs-lisp
(use-package company
  :ensure t
  :config
  (add-hook 'after-init-hook 'global-company-mode))
#+END_SRC

Use both ~​php-extras-company~ and ~​company-dabbrev~.
#+BEGIN_SRC emacs-lisp
(add-hook 'php-mode-hook
            (lambda ()
              (set (make-local-variable 'company-backends)
                   '((php-extras-company company-dabbrev) company-capf company-files))))
#+END_SRC

**** Company Configuration
#+BEGIN_SRC emacs-lisp
;;(setq company-idle-delay 0.5)
(setq company-tooltip-limit 20)                      ; bigger popup window
(setq company-idle-delay .3)                         ; decrease delay before autocompletion popup shows
(setq company-echo-delay 0)                          ; remove annoying blinking
(setq company-begin-commands '(self-insert-command)) ; start autocompletion only after typing

#+END_SRC

*** Company Mode Go
#+BEGIN_SRC emacs-lisp
(use-package company-go
  :ensure t)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(add-hook 'go-mode-hook (lambda ()
                          (set (make-local-variable 'company-backends) '(company-go))
                          (company-mode)))
#+END_SRC
*** Magit
Magit is a Git interface in emacs.
User manual [[https://magit.vc/manual/magit.html#Top][here]].
#+BEGIN_SRC emacs-lisp
(use-package magit
  :ensure t)
(global-set-key (kbd "C-x g") 'magit-status)
#+END_SRC
*** Minimap-mode
#+BEGIN_SRC emacs-lisp
(use-package minimap
  :ensure t)
#+END_SRC
*** Go Mode
Go lang mode on github [[https://github.com/dominikh/go-mode.el][here]].
#+BEGIN_SRC emacs-lisp
(use-package go-mode
  :ensure t)
#+END_SRC
*** Go-eldoc
#+BEGIN_SRC emacs-lisp
(use-package go-eldoc
  :ensure t)
#+END_SRC
** Keybindings
*** General Keybindings
Use Ctrl-W to remove word before point.
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-w") 'backward-kill-word)
(global-set-key (kbd "C-x C-k") 'kill-region)
#+END_SRC

Use zap up to char instead of the default of zap and delete char.
#+BEGIN_SRC emacs-lisp
  (autoload 'zap-up-to-char "misc"
    "Kill up to, but not including ARGth occurrence of CHAR.
  
  \(fn arg char)"
    'interactive)

(global-set-key (kbd "M-z") 'zap-up-to-char)
#+END_SRC

Use C-ö G to jump down and C-ö g to jump up.
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-ö G") 'end-of-buffer)
(global-set-key (kbd "C-ö g") 'beginning-of-buffer)
#+END_SRC



*** Plugin Keybindings
**** Helm Keybindings
The default C-x c is quite close to C-x C-c, which quits Emacs. Changed to C-c h. Note: We must set “C-c h” globally, because we cannot change helm-command-prefix-key once helm-config is loaded.
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c h") 'helm-command-prefix)
(global-unset-key (kbd "C-x c"))
#+END_SRC
Use helm mini, helm-M-x and helm kill ring.
I missclick C-x b when I intend to do C-x C-b so use both for helm-mini
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x b") 'helm-mini)
(global-set-key (kbd "C-x C-b") 'helm-mini)
(global-set-key (kbd "C-x C-f") 'helm-find-files)
(setq helm-buffers-fuzzy-matching t
      helm-recentf-fuzzy-match    t) ; fuzzy matching helm mini

(define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action) ; rebind tab to run persistent action

(define-key helm-map (kbd "C-i") 'helm-execute-persistent-action) ; make TAB work in terminal
(define-key helm-map (kbd "C-z")  'helm-select-action) ; list actions using C-z
(global-set-key (kbd "M-x") 'helm-M-x)

(global-set-key (kbd "M-y") 'helm-show-kill-ring)

(setq helm-M-x-fuzzy-match t) ;; optional fuzzy matching for helm-M-x

(when (executable-find "ack-grep")
  (setq helm-grep-default-command "ack-grep -Hn --no-group --no-color %e %p %f"
        helm-grep-default-recurse-command "ack-grep -H --no-group --no-color %e %p %f"))
#+END_SRC
**** Avy
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c C-SPC") 'avy-goto-word-or-subword-1)
#+END_SRC
**** Expand Region
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c e") 'er/expand-region)
#+END_SRC
**** Dash at point
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c D") 'dash-at-point)
#+END_SRC
** Hooks
*** Web Dev Hooks
#+BEGIN_SRC emacs-lisp
(add-hook 'sqml-mode-hook 'emmet-mode) ;; auto start on any markup modes
(add-hook 'web-mode-hook 'emmet-mode)

;; Use Auto Fill Mode for all text mode buffers
(add-hook 'text-mode-hook 'turn-on-auto-fill)


;; PHP mode Hooks
(add-hook 'php-mode-hook 'electric-pair-mode)
(add-hook 'php-mode-hook (lambda () (subword-mode 1)))
(add-hook 'php-mode-hook (lambda () (setq show-trailing-whitespace t)))
(add-hook 'php-mode-hook 'php-enable-psr2-coding-style)
(add-hook 'php-mode-hook 'linum-mode)
(add-hook 'php-mode-hook
          (lambda () (local-set-key (kbd "C-c -") 'php-extras-insert-previous-variable)))
(add-hook 'php-mode-hook
          (lambda () (local-set-key (kbd "C-c TAB") 'indent-entire-buffer)))

;; remove {} auto pairing in electric-pair-pairs for web-mode
  ;; remove {} auto pairing in electric-pair-pairs for web-mode
  (add-hook
   'web-mode-hook
   '(lambda ()
      (setq-local electric-pair-inhibit-predicate
                  (lambda (c)
                    (if (char-equal c ?{) t (electric-pair-default-inhibit c))))))
;; OLD:
;; remove {} auto pairing in electric-pair-pairs for web-mode
;(add-hook
;  'web-mode-hook
;   '(lambda ()
;      (setq web-mode-enable-auto-pairing nil)
;      (setq-local
;       electric-pair-pairs
;       (append electric-pair-pairs '((?% . ?%))))))
#+END_SRC
*** Go Lang Hooks
#+BEGIN_SRC emacs-lisp
(defun my-go-mode-hook ()
  (electric-pair-mode)
  (subword-mode 1)
  (go-eldoc-setup)
  (setq compile-command "go build -v && go test -v && go vet")
  ; Use goimports 
  (setq gofmt-command "goimports")
  ;; Use gofmt with C-c f and after save
  (local-set-key (kbd "C-c f") 'gofmt)
  (add-hook 'before-save-hook 'gofmt-before-save)
 )
(add-hook 'go-mode-hook 'my-go-mode-hook)

#+END_SRC
** Custom Functions
*** Duplicate Line
#+BEGIN_SRC emacs-lisp
(defun duplicate-line()
  (interactive)
  (move-beginning-of-line 1)
  (kill-line)
  (yank)
  (open-line 1)
  (next-line 1)
  (yank)
)
(global-set-key (kbd "C-c d") 'duplicate-line)
#+END_SRC

*** Indent Region
#+BEGIN_SRC emacs-lisp
(defun indent-entire-buffer ()
(interactive)
  (indent-region (point-min) (point-max)) )
#+END_SRC
*** Comment Line
#+BEGIN_SRC emacs-lisp
(defun comment-or-uncomment-region-or-line ()
    "Comments or uncomments the region or the current line if there's no active region."
    (interactive)
    (let (beg end)
        (if (region-active-p)
            (setq beg (region-beginning) end (region-end))
            (setq beg (line-beginning-position) end (line-end-position)))
        (comment-or-uncomment-region beg end)))
;(global-set-key (kbd "C-c C-c") 'comment-or-uncomment-region-or-line)
(add-hook 'php-mode-hook
          (lambda () (local-set-key (kbd "C-c C-c") 'comment-or-uncomment-region-or-line)))
(add-hook 'web-mode-hook
          (lambda () (local-set-key (kbd "C-c C-c") 'comment-or-uncomment-region-or-line)))
(add-hook 'go-mode-hook
          (lambda () (local-set-key (kbd "C-c C-c") 'comment-or-uncomment-region-or-line)))
#+END_SRC
*** Set emacs PATH to Shell PATH
#+BEGIN_SRC emacs-lisp
(defun set-exec-path-from-shell-PATH ()
  "Set up Emacs' `exec-path' and PATH environment variable to match that used by the user's shell.

This is particularly useful under Mac OSX, where GUI apps are not started from a shell."
  (interactive)
  (let ((path-from-shell (replace-regexp-in-string "[ \t\n]*$" "" (shell-command-to-string "$SHELL --login -i -c 'echo $PATH'"))))
    (setenv "PATH" path-from-shell)
    (setq exec-path (split-string path-from-shell path-separator))))

(set-exec-path-from-shell-PATH)

#+END_SRC
*** Toggle Minimap Mode
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c m t") 'minimap-mode)
#+END_SRC
