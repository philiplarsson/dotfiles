#+TITLE: Emacs configuration
#+DESCRIPTION: An org-babel based emacs configuration
#+LANGUAGE: en
#+PROPERTY: results silent

* Font
#+BEGIN_SRC emacs-lisp
(set-frame-font "Source Code Variable 14" nil t)

;; Add linespacing
(setq-default line-spacing 6)
#+END_SRC

* General Settings

#+BEGIN_SRC emacs-lisp
;; Mac settings.
;; Will enable brackets and square brackets, among other things.
(when (eq system-type 'darwin)
(setq mac-option-modifier nil
  mac-command-modifier 'meta              ;; use cmd as meta/alt
  select-enable-clipboard t))             ;; cut and paste uses clipboard

;; Allow y and n instead of yes and no
(fset 'yes-or-no-p 'y-or-n-p)

;; Disable bell
(setq visible-bell 1)

;; Save backups in emacs-backups folder
(setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
;; Disk space is cheap. Save lots.
(setq delete-old-versions -1)
(setq version-control t)
(setq vc-make-backup-files t)

;; Remove Toolbar
(tool-bar-mode -1)

;; Highlight Parenthesis
(show-paren-mode t)

;; Remove Scrollbar
(scroll-bar-mode -1)

;; Sort apropos results by relevancy
(setq apropos-sort-by-scores t)

;; Show current column in the mode line
(setq column-number-mode t)

;; Use zap-up-to-char instead of zap-to-char
(global-set-key "\M-z" 'zap-up-to-char)

;; Add JS as an org-babel-execute-funciton
(org-babel-do-load-languages
      'org-babel-load-languages
      '((js . t)))

;; Remember more
(setq global-mark-ring-max 5000         ; increase mark ring to contains 5000 entries
      mark-ring-max 5000                ; increase mark ring to contains 5000 entries
      kill-ring-max 5000                ; increase kill-ring capacity
      )
#+END_SRC
* hippie expand
From [[https://tuhdo.github.io/emacs-tutor3.html#orgheadline30][tuhdo.github.io]].

#+BEGIN_SRC emacs-lisp
;; Hippie-Expand Tab-Ctrl

;; hippie-expand is a better version of dabbrev-expand.
;; While dabbrev-expand searches for words you already types, in current
;; buffers and other buffers, hippie-expand includes more sources,
;; such as filenames, klll ring...
(global-set-key (kbd "<C-tab>") 'hippie-expand)
(setq
 hippie-expand-try-functions-list
 '(try-expand-dabbrev ;; Try to expand word "dynamically", searching the current buffer.
   try-expand-dabbrev-all-buffers ;; Try to expand word "dynamically", searching all other buffers.
   try-expand-dabbrev-from-kill ;; Try to expand word "dynamically", searching the kill ring.
   try-complete-file-name-partially ;; Try to complete text as a file name, as many characters as unique.
   try-complete-file-name ;; Try to complete text as a file name.
   try-expand-all-abbrevs ;; Try to expand word before point according to all abbrev tables.
   try-expand-list ;; Try to complete the current line to an entire line in the buffer.
   try-expand-line ;; Try to complete the current line to an entire line in the buffer.
   try-complete-lisp-symbol-partially ;; Try to complete as an Emacs Lisp symbol, as many characters as unique.
   try-complete-lisp-symbol) ;; Try to complete word as an Emacs Lisp symbol.
 )
#+END_SRC
* IDO Mode
Introduction [[https://www.masteringemacs.org/article/introduction-to-ido-mode][here]].
Enable basic Ido support for files and buffers and the very useful “flex matching” as well.

#+BEGIN_SRC emacs-lisp
(setq ido-enable-flex-matching t)
(setq ido-everywhere t)
(ido-mode 1)
(defalias 'list-buffers 'ibuffer)    ; use ibuffer as default
#+END_SRC
* Theme
#+BEGIN_SRC emacs-lisp
(use-package nimbus-theme
  :ensure t)
#+END_SRC
* Plugins
** Powerline
[[https://github.com/milkypostman/powerline][Powerline]] is Emacs version of the Vim powerline.

#+BEGIN_SRC emacs-lisp
(use-package powerline
  :ensure t
  :init)

(powerline-default-theme)
#+END_SRC
** Which key
#+BEGIN_QUOTE
which-key is a minor mode for Emacs that displays the key bindings following your currently entered incomplete command (a prefix) in a popup.
#+END_QUOTE

#+BEGIN_SRC emacs-lisp
(use-package which-key
  :ensure t
  :config (which-key-mode))
#+END_SRC
** Ace Window
[[https://github.com/abo-abo/ace-window][Ace-window]] helps with selecting a window when there is more than 2.

#+BEGIN_SRC emacs-lisp
(use-package ace-window
  :ensure t
  :bind ("M-o" . ace-window)
  :config
  (custom-set-faces
    '(aw-leading-char-face
     ((t (:inherit ace-jump-face-foreground :height 2.0)))))
)
#+END_SRC

** Avy
[[https://github.com/abo-abo/avy][Avy]] is a package for jumping to things.

#+BEGIN_SRC emacs-lisp
(use-package avy
  :ensure t
  :bind ("C-c C-SPC" . avy-goto-word-or-subword-1))
#+END_SRC

** htmlize
[[https://github.com/hniksic/emacs-htmlize][emacs-htmlize]] seems to be needed for some files to be converted to html.

#+BEGIN_SRC emacs-lisp
(use-package htmlize
  :ensure t)
#+END_SRC
** Markdown Mode
"[[https://jblevins.org/projects/markdown-mode/][markdown-mode]] is a major mode for editing Markdown-formatted text."

#+BEGIN_SRC emacs-lisp
(use-package markdown-mode
  :ensure t
  :commands (markdown-mode gfm-mode)
  :mode (("README\\.md\\'" . gfm-mode)
         ("\\.md\\'" . markdown-mode)
         ("\\.markdown\\'" . markdown-mode))
  :init (setq markdown-command "multimarkdown"))
#+END_SRC
** Exec-path-from-shell (macOS)
#+BEGIN_QUOTE
A GNU Emacs library to ensure environment variables inside Emacs look
the same as in the user's shell.
#+END_QUOTE

#+BEGIN_SRC emacs-lisp
(use-package exec-path-from-shell
  :ensure t)

(when (eq system-type 'darwin)
  (exec-path-from-shell-initialize))
#+END_SRC
** Volatile Highlights
[[https://github.com/k-talo/volatile-highlights.el][Volatile-highlights]] is a minor mode for visual feedback on some operations.
#+BEGIN_SRC emacs-lisp
(use-package volatile-highlights
  :config
  (volatile-highlights-mode t))
#+END_SRC
** Undo Tree
[[https://elpa.gnu.org/packages/undo-tree.html][Undo Tree]] is an advanced yet simpler undo system.

Bring up the visual undo tree with =C-x u=.

Toggle time-stamps with =t=, while in the undo-tree visualizer.

#+BEGIN_SRC emacs-lisp
(use-package undo-tree
  :ensure t
  :init
  (global-undo-tree-mode))
(global-set-key (kbd "C-z") 'undo-tree-undo)
(global-set-key (kbd "C-S-z") 'undo-tree-redo)
#+END_SRC
** Duplicate thing
[[https://github.com/ongaeshi/duplicate-thing][duplicate-thing.el]] is Emacs lisp. Easy duplicate line or region, with comment out.

#+BEGIN_SRC emacs-lisp
(use-package duplicate-thing
  :ensure t
  :init)
(global-set-key (kbd "M-c") 'duplicate-thing)
#+END_SRC
** clean-aindent-mode
[[https://github.com/pmarinov/clean-aindent-mode][clean-aindent-mode]] cleans up whitespace that was created by me.

#+BEGIN_SRC emacs-lisp
(use-package clean-aindent-mode
  :ensure t
  :init)
(add-hook 'prog-mode-hook 'clean-aindent-mode)
#+END_SRC
** highlight-symbol
[[https://github.com/nschum/highlight-symbol.el][highlight-symbol.el]] will highlight symbol under point and allow you to
move to next or previous occurrence.

#+BEGIN_SRC emacs-lisp
(use-package highlight-symbol
  :ensure t
  :init)

(setq highlight-symbol-idle-delay 0.6
      highlight-symbol-on-navigation-p t)

;; Allow navigation with M-n and M-p
(highlight-symbol-nav-mode)

;; Jump between symbol
(global-set-key (kbd "M-n") 'highlight-symbol-next)
(global-set-key (kbd "M-p") 'highlight-symbol-prev)

;; Toggle highlight symbol on or off
(global-set-key (kbd "C-c H") 'highlight-symbol-mode)
#+END_SRC

** JS2-mode
[[https://github.com/mooz/js2-mode][js2-mode]] is an improved JavaScript editing mode for Emacs.

#+BEGIN_SRC emacs-lisp
(use-package js2-mode
  :ensure t
  :init)

;; Use as major mode for JavaScript editing:
(add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))

;; Hook it in for shell scripts
(add-to-list 'interpreter-mode-alist '("node" . js2-mode))

;; Turn off js2 mode errors & warnings (we lean on eslint/standard using via Flycheck)
(setq js2-mode-show-parse-errors nil)
(setq js2-mode-show-strict-warnings nil)
#+END_SRC
** Company-Mode
[[http://company-mode.github.io/][company]] is a text completion framework for Emacs. The name stands for
"complete anything". It uses pluggable back-ends and front-ends to
retrieve and display completion candidates.

For information about company-mode, use =C-h f company-mode=.

#+BEGIN_SRC emacs-lisp
(use-package company
  :ensure t
  :init)
(add-hook 'after-init-hook 'global-company-mode)

;; Disable for org-mode
(setq company-global-modes '(not org-mode))
#+END_SRC
** Flycheck
[[https://flycheck.readthedocs.io/en/latest/][flycheck]] is a modern on-the-fly syntax checking extension for Emacs.

To verify if a syntax checker is running, use =C-c ! v= or =M-x flycheck-verify-setup=.

#+BEGIN_SRC emacs-lisp
;; Install flycheck and enable in all buffers where syntax checking is possible.
(use-package flycheck
  :ensure t
  :init (global-flycheck-mode))

;; Use some color in mode-line.
(use-package flycheck-color-mode-line
  :ensure t
  :init)

(eval-after-load "flycheck"
  '(add-hook 'flycheck-mode-hook 'flycheck-color-mode-line-mode))

;; Show errors under point in pos-tip popups.
(use-package flycheck-pos-tip
  :ensure t
  :init)
(flycheck-pos-tip-mode)

;; Only check buffer when saved
(setq flycheck-check-syntax-automatically '(mode-enabled save))
#+END_SRC

** Lsp-mode
[[Emacs client/library for the Language Server Protocol ][lsp-mode]] is an Emacs client/library for the Language Server Protocol.

#+BEGIN_SRC emacs-lisp
  ;; (use-package lsp-mode
  ;;   :hook (prog-mode . lsp)
  ;;   :ensure t
  ;;   :commands lsp)

  ;; ;; lsp-ui is for flycheck integration and UI modules
  ;; (use-package lsp-ui 
  ;;    :ensure t
  ;;    :commands lsp-ui-mode)

  ;; ;; Enable lsp-ui-mode
  ;; (add-hook 'lsp-mode-hook 'lsp-ui-mode)
  ;; ;; Prefer flycheck
  ;; (setq lsp-prefer-flymake nil)
  ;; (setq lsp-ui-sideline-enable nil)
  ;; ;; company-mode for completion  
  ;; (use-package company-lsp 
  ;;   :ensure t
  ;;   :commands company-lsp)
  ;; (push 'company-lsp company-backends)

  ;; ;; Disable snippet until yasnippet is installed
  ;; (setq lsp-enable-snippet nil)
#+END_SRC

** Projectile
[[https://github.com/bbatsov/projectile#usage][Projectile]] is a project interaction library for Emacs.
Manual is [[https://docs.projectile.mx/en/latest/][here]].

#+BEGIN_SRC emacs-lisp
(use-package projectile
  :ensure t
  :pin melpa-stable
  :config
  (define-key projectile-mode-map (kbd "s-p") 'projectile-command-map)
  (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
  (projectile-mode +1))
#+END_SRC

* Keybindings
** General Keybindings
#+BEGIN_SRC emacs-lisp
;; Toggle fullscreen
(global-set-key (kbd "C-c F") 'toggle-frame-fullscreen)

;; Prefer backward-kill-word over Backspace
(global-set-key "\C-w" 'backward-kill-word)
(global-set-key "\C-x\C-k" 'kill-region)

;; Search word under point
(global-set-key (kbd "C-S-s") 'isearch-forward-symbol-at-point)


#+END_SRC

* Small Functions
** Concat Lines

Move up line below. (Vim like Shift-j).

#+BEGIN_SRC emacs-lisp
(defun concat-lines ()
  (interactive)
  (next-line)
  (join-line))

(global-set-key (kbd "M-j") 'concat-lines)
#+END_SRC

** Run Tests

Evaluate current buffer and run ERT.

#+BEGIN_SRC emacs-lisp
(defun eval-buffer-and-run-tests ()
  "Evaluates the current buffer and runs ERT"
  (interactive)
  (eval-buffer)
  (ert t))

(global-set-key (kbd "C-c T") 'eval-buffer-and-run-tests)
#+END_SRC
** smarter-move-beginning-of-line
#+BEGIN_QUOTE
Wouldn’t it be great if C-a initially took you to the first
non-whitespace char(as back-to-indentation does) on a line, and if
pressed again took you to the actual beginning of the line? It would
be!
#+END_QUOTE

From [[https://emacsredux.com/blog/2013/05/22/smarter-navigation-to-the-beginning-of-a-line/][emacsredux.com]].

#+BEGIN_SRC emacs-lisp
(defun smarter-move-beginning-of-line (arg)
  "Move point back to indentation of beginning of line.

Move point to the first non-whitespace character on this line.
If point is already there, move to the beginning of the line.
Effectively toggle between the first non-whitespace character and
the beginning of the line.

If ARG is not nil or 1, move forward ARG - 1 lines first.  If
point reaches the beginning or end of the buffer, stop there."
  (interactive "^p")
  (setq arg (or arg 1))

  ;; Move lines first
  (when (/= arg 1)
    (let ((line-move-visual nil))
      (forward-line (1- arg))))

  (let ((orig-point (point)))
    (back-to-indentation)
    (when (= orig-point (point))
      (move-beginning-of-line 1))))

;; remap C-a to `smarter-move-beginning-of-line'
(global-set-key [remap move-beginning-of-line]
                'smarter-move-beginning-of-line)
#+END_SRC

* Future Plugins to take a look at

- [X] [[http://company-mode.github.io/][company]]: A text completion framework for Emacs. 
- [X] [[https://flycheck.readthedocs.io/en/latest/][flycheck]]: Syntax checking
- [ ] [[https://github.com/Fuco1/smartparens][smartparens]]: Minor mode for Emacs that deals with parens pairs and tries to be smart about it.
- [ ] [[https://github.com/joaotavora/yasnippet][yasnippet]]: Template system for Emacs.
- [ ] [[https://github.com/magnars/expand-region.el][expand-region]]: Increases the selected region by semantic units. Video [[http://emacsrocks.com/e09.html][here]].
- [ ] [[https://github.com/purcell/ibuffer-vc][ibuffer-vc]]: Let ibuffer-mode group files by git project.
- [ ] [[https://magit.vc/][magit]]: Amazing git interface.
- [ ] [[https://framagit.org/steckerhalter/discover-my-major][discover-my-major]]: Discover key bindings for the current major mode.
- [ ] [[https://github.com/pashinin/workgroups2][workgroups2]]: Emacs session manager. Save opened buffers to disk and restore later.
- [ ] helm
