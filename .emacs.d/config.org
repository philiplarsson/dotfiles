* General Configuration

Make sure use-package is installed.
#+begin_src emacs-lisp
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

#+end_src

Some nice defaults ðŸ˜„

#+begin_src emacs-lisp
; Disable tool bar.
(tool-bar-mode -1)

; Disable scroll bar.
(scroll-bar-mode -1)

; Turn on start up message. Instead emacs will jump into scratch.
(setq inhibit-startup-message t)

;; Disable bell
(setq visible-bell 1)

;; Allow y and n instead of yes and no
(fset 'yes-or-no-p 'y-or-n-p)

;; Confirm before exiting emacs
(setq confirm-kill-emacs 'yes-or-no-p)

;; Iterate through CamelCase words
(global-subword-mode 1)

;; Remove whitspace on end of lines on save.
(add-hook 'before-save-hook 'delete-trailing-whitespace)

;; Set width for tabs
(setq tab-width 2)

;; Stop using tabs to indent
;;(setq indent-tabs-mode nil)

;; Use zap-up-to-char instead of zap-to-char
(global-set-key "\M-z" 'zap-up-to-char)

;; Save bookmarks file each time a change is made
(setq bookmark-save-flag 1)

;; Reload file if changed on disc
(global-auto-revert-mode 1)

;; Auto refresh dired when file changes
(add-hook 'dired-mode-hook 'auto-revert-mode)

;; suppress auto-revert messages
(setq auto-revert-verbose nil)

;; Hightlight parenthesis
(show-paren-mode 1)
  #+end_src

Backup settings

#+begin_src emacs-lisp
;; Save backups in emacs-backups folder
(setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
; Safest but slowest - make backups by copying
(setq backup-by-copying t)
; Use version numbers on backup
(setq version-control t)
; Store files under version control as other files
(setq vc-make-backup-files t)
;; Delete excess backups
(setq delete-old-versions t)
; how many of the newest versions to keep
(setq kept-new-versions 20)
; and how many of the old
(setq kept-old-versions 5)
#+end_src
** Mac Settings

    #+begin_src emacs-lisp

;; Will enable brackets and square brackets, among other things.
(when (eq system-type 'darwin)
(setq mac-option-modifier nil
  mac-command-modifier 'meta))              ;; use cmd as meta/alt

;  https://www.reddit.com/r/emacs/comments/8ph0hq/i_have_converted_from_the_mac_port_to_the_ns_port/
(if (version< "27.0" emacs-version)
    (set-fontset-font
     "fontset-default" 'unicode "Apple Color Emoji" nil 'prepend)
  (set-fontset-font
   t 'symbol (font-spec :family "Apple Color Emoji") nil 'prepend))
    #+end_src

* Org Mode
Use ~C-c C-,~ to insert a template. Replaces ~<s~.

~C-c l~ is used to store links. Useful when linking notes in org
mode. Store link using ~C-c l~ then insert the link using ~C-c C-l~.

#+begin_src emacs-lisp
(define-key org-mode-map (kbd "C-c l") 'org-store-link)
#+end_src

* Mixed Settings

** Vi-like paren mathing

#+begin_quote
Here is some Emacs Lisp that will make the % key show the matching
parenthesis, like in vi. In addition, if the cursor isn't over a
parenthesis, it simply inserts a % like normal.
#+end_quote
[[https://www.gnu.org/software/emacs/manual/html_node/efaq/Matching-parentheses.html][source]]

#+begin_src emacs-lisp
(global-set-key "%" 'match-paren)

(defun match-paren (arg)
"Go to the matching paren if on a paren; otherwise insert %."
(interactive "p")
(cond ((looking-at "\\s(") (forward-list 1) (backward-char 1))
((looking-at "\\s)") (forward-char 1) (backward-list 1))
(t (self-insert-command (or arg 1)))))

#+end_src

* General Keybindings

   #+begin_src emacs-lisp
;; Use Ctrl-W to delete word and rebind Ctrl-X Ctrl-k to kill region.
(global-set-key "\C-w" 'backward-kill-word)
(global-set-key "\C-x\C-k" 'kill-region)

;; Ctrl-X Ctrl-M to invoke M-x
(global-set-key "\C-x\C-m" 'execute-extended-command)
   #+end_src

* Plugins
** Enviroment Management
By default emacs doesn't read from the same environment variables set
in your terminal. This package fixes that.

#+begin_src emacs-lisp
  (use-package exec-path-from-shell
    :ensure t
    :config
    (setq exec-path-from-shell-check-startup-files nil)
    (exec-path-from-shell-initialize))
#+end_src
** Which Key
[[https://github.com/justbur/emacs-which-key][Which key]] displays available keybindings in a popup.

#+begin_src emacs-lisp
(use-package which-key
  :ensure t
  :diminish which-key-mode
  :config
  (which-key-mode)
;; same as default, except all keys from local maps shown first
  (setq which-key-sort-order 'which-key-local-then-key-order))
#+end_src
** Avy
[[https://github.com/abo-abo/avy][Avy]] is a package for jumping to visible text using a char-based decision tree.

#+begin_src emacs-lisp
(use-package avy
  :ensure t
  :bind ("C-c C-SPC" . avy-goto-word-or-subword-1))

;; case sensitive
(setq avy-case-fold-search nil)
#+end_src

** Crux
[[https://github.com/bbatsov/crux][Crux]], a Collection of Ridiculously Useful eXtensions for Emacs.

#+begin_src emacs-lisp
(use-package crux
  :ensure t
  :bind (("C-a" . crux-move-beginning-of-line)))
#+end_src

** Smex
=M-x= enhancement, which sorts M-x commands based on recency and
frequency. Integrates with consel m-x.

   #+begin_src emacs-lisp
  (use-package smex
    :ensure t)

   #+end_src

** Ivy
Ivy is an interactive interface for completion. Think of it as ido with more features.

#+begin_src emacs-lisp
; diminish will hide ivy-mode from the mode line
; ivy-mode will replace many of the build in ido functionality

(use-package ivy
  :ensure t
  :diminish (ivy-mode)
  :config
  (setq ivy-use-virtual-buffers t)
  (setq ivy-count-format "(%d/%d) ")
  (ivy-mode t))
#+end_src

** Counsel
Counsel provides emacs commands that make the most out of ivy.

   #+begin_src emacs-lisp
  (use-package counsel
    :ensure t
    :bind (("M-x" . counsel-M-x)
	 ("C-x C-f" . counsel-find-file)))
   #+end_src

** Swiper
Swiper is an enhanced version of isearch.

#+begin_src emacs-lisp
  (use-package swiper
  :ensure t
  :bind (("C-s" . swiper-isearch)
	 ("C-r" . swiper-isearch)
	 ("C-c C-r" . ivy-resume)))
#+end_src

** Projectile
Projectile makes navigation in and between projects much easier.

Uses ido by default, so lets change to ivy.

#+begin_src emacs-lisp
(use-package projectile
  :ensure t
  :config
  (define-key projectile-mode-map (kbd "s-p") 'projectile-command-map)
  (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
  (setq projectile-completion-system 'ivy)
  (projectile-mode +1))

; counsel-projectile provides further ivy integration into projectile
(use-package counsel-projectile
  :ensure t
  :config
  (counsel-projectile-mode))
#+end_src
** Docker
*** Dockerfile Mode
Syntax highlighting for dockerfiles.

#+begin_src emacs-lisp
(use-package dockerfile-mode
  :ensure t
  :mode ("Dockerfile\\'" . dockerfile-mode))

#+end_src

*** Docker Compose

#+begin_src emacs-lisp
(use-package docker-compose-mode
  :ensure t)
#+end_src

** Typescript
=typscript.el= is a minimalistic major-mode for editing typescript files.

#+begin_src emacs-lisp
(use-package typescript-mode
  :ensure t
  :config (setq typescript-indent-level 2))

#+end_src
** Git Gutter
[[https://github.com/emacsorphanage/git-gutter][Git Gutter]] shows line status from git.

#+begin_src emacs-lisp
(use-package git-gutter
  :ensure t
  :diminish git-gutter-mode
  :init
    (global-git-gutter-mode +1))
#+end_src

** Smart Parens
[[https://github.com/Fuco1/smartparens][Smartparens]] is a minor mode for dealing with pairs in Emacs.

   #+begin_src emacs-lisp
  (use-package smartparens
    :ensure t
    :diminish smartparens-mode
    :config
    ; Require the default configuration (as mentioned in the smartparens readme)
    (require 'smartparens-config)
    (add-hook 'prog-mode-hook 'smartparens-mode))
   #+end_src
** Undo Tree
[[http://www.dr-qubit.org/undo-tree.html][Undo-tree]] treats changes as a branching tree of changes.

   #+begin_src emacs-lisp
  (use-package undo-tree
    :ensure t
    :diminish undo-tree-mode
    :config
    (global-undo-tree-mode 1))
   #+end_src

Use C-z and C-S-z for undo and redo.
#+begin_src emacs-lisp
;; make ctrl-z undo
(global-set-key (kbd "C-z") 'undo)
;; make ctrl-Z redo
(defalias 'redo 'undo-tree-redo)
(global-set-key (kbd "C-S-z") 'redo)

#+end_src
** Slime
[[https://common-lisp.net/project/slime/][SLIME]] is a lisp interaction mode for emacs.

We need to define the default Lisp to use. Since I'm using =clisp=, I
use that (use =which clisp= to find it).

#+begin_src emacs-lisp
(use-package slime
  :ensure t
  :config
  (setq inferior-lisp-program "/usr/local/bin/clisp"))

#+end_src
** Ace Window
[[https://github.com/abo-abo/ace-window][Ace window]] makes it easier to switch between multiple windows.

#+begin_src emacs-lisp
  (use-package ace-window
    :ensure t
    :bind ("M-o" . ace-window)
    :config
    (setq aw-keys '(?a ?o ?e ?u ?h ?t ?n ?l ?g))
    (custom-set-faces
      '(aw-leading-char-face
       ((t (:inherit ace-jump-face-foreground :height 4.0))))))

;; Make M-o work in ansi-term
;; We need to load it after "term", otherwise 'term-*-map won't exist.
(with-eval-after-load "term"
    (define-key term-raw-map (kbd "M-o") 'ace-window)
    (define-key term-mode-map (kbd "M-o") 'ace-window))

#+end_src

** Markdown-mode
[[https://jblevins.org/projects/markdown-mode/][Markdown mode]] is a major mode for editing Markdown-formatted text.

To show markdown preview (with for instance =C-c C-c l=), install
markdown with =brew install markdown=.

#+begin_src emacs-lisp
(use-package markdown-mode
  :ensure t
  :commands (markdown-mode gfm-mode)
  :mode (("README\\.md\\'" . gfm-mode)
         ("\\.md\\'" . markdown-mode)
         ("\\.markdown\\'" . markdown-mode))
  :init (setq markdown-command "markdown"))
#+end_src
** Golden Ratio

   #+begin_src emacs-lisp
(use-package golden-ratio
  :ensure t
  :config
  ;; make ace-window trigger golden-ratio
  (add-to-list 'golden-ratio-extra-commands 'ace-window)
  :init
  (golden-ratio-mode 1))
   #+end_src
** Go-Mode

Setup [[https://github.com/dominikh/go-mode.el][go-mode]]. Also use goimports instead of gofmt. [[https://pkg.go.dev/golang.org/x/tools/cmd/goimports?tab=doc][goimports]] will fix
imports as well as format your code, so it's basically gofmt but with
added import fix.

#+begin_src emacs-lisp
(use-package go-mode
  :ensure t
  :config
  (add-hook 'go-mode-hook (lambda () (setq tab-width 4)))
)
#+end_src

Don't forget to install gopls.

#+begin_src shell
go get golang.org/x/tools/gopls@latest
#+end_src

lsp-mode, company-lsp, lsp-ui and flycheck

** LSP Mode

#+begin_src emacs-lisp
;; set prefix for lsp-command-keymap (few alternatives - "C-l", "C-c l")
(setq lsp-keymap-prefix "C-c l")

(use-package lsp-mode
    :ensure t
    :hook (
            (go-mode . lsp)
            ;; if you want which-key integration
            (lsp-mode . lsp-enable-which-key-integration))
    :commands lsp lsp-deferred)

;; if you are ivy user
(use-package lsp-ivy
  :ensure t
  :bind ("C-c l f" . lsp-ivy-workspace-symbol)
  :commands lsp-ivy-workspace-symbol)

;; Set up before-save hooks to format buffer and add/delete imports.
;; Make sure you don't have other gofmt/goimports hooks enabled.
(defun lsp-go-install-save-hooks ()
  (add-hook 'before-save-hook #'lsp-format-buffer t t)
  (add-hook 'before-save-hook #'lsp-organize-imports t t))
(add-hook 'go-mode-hook #'lsp-go-install-save-hooks)

;; optionally
;(use-package lsp-ui :commands lsp-ui-mode)

#+end_src
** Company Mode

Company mode is a completion package that works well with lsp mode.

Note that *lsp-go and company-lsp should not be installed* according
to gopls github [[https://github.com/golang/tools/blob/master/gopls/doc/emacs.md#troubleshooting][page]].

For company documentation, use ~M-x describe-function RET company-mode~.

#+begin_src emacs-lisp
(use-package company
  :ensure t
  :config
  ;; Optionally enable completion-as-you-type behavior.
  (setq company-idle-delay 0.5)
  (setq company-minimum-prefix-length 2))

#+end_src
** Web-mode

   #+begin_src emacs-lisp
(defun turnoff-smartparens ()
  (turn-off-smartparens-mode))

(use-package web-mode
  :ensure t
  :config
  (add-to-list 'auto-mode-alist '("\\.gohtml\\'" . web-mode))
  ;; Disable smartparens when in web-mode.
  (add-hook 'web-mode 'turnoff-smartparens)
)
   #+end_src
** Dash-at-point
Run dash with the word under point.

#+begin_src emacs-lisp
(use-package dash-at-point
  :ensure t
  :config
  (global-set-key "\C-cd" 'dash-at-point)
)
#+end_src

** Par edit
#+begin_src emacs-lisp
(use-package paredit
  :ensure t
  :config
  ;; Use paredit with emacs lisp modes
  (autoload 'enable-paredit-mode "paredit" "Turn on pseudo-structural editing of Lisp code." t)
  (add-hook 'emacs-lisp-mode-hook       #'enable-paredit-mode)
  (add-hook 'eval-expression-minibuffer-setup-hook #'enable-paredit-mode)
  (add-hook 'ielm-mode-hook             #'enable-paredit-mode)
  (add-hook 'lisp-mode-hook             #'enable-paredit-mode)
  (add-hook 'lisp-interaction-mode-hook #'enable-paredit-mode)
  (add-hook 'scheme-mode-hook           #'enable-paredit-mode)
)
  #+end_src
